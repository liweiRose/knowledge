(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{244:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network"}},[t._v("#")]),t._v(" Network")]),t._v(" "),a("h3",{attrs:{id:"tcp-三次握手-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手-四次挥手"}},[t._v("#")]),t._v(" TCP 三次握手 四次挥手")]),t._v(" "),a("p",[t._v("建立和断开连接的一种策略")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 连接\n\n  ① 发送端 发送 一个带"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SYN")]),t._v("标志的数据包 给接收端\n\n  ② 接收端收到后，回传 一个带有"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SYN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ACK")]),t._v("标志的数据包 确认收到了信息\n\n  ③ 发送端再回传 一个带"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ACK")]),t._v("标志的数据包 代表“握手”结束\n\n tips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 若在握手过程中某个阶段莫名中断，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v("协议会再次以相同的顺序发送相同的数据包\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 断开 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v(" 连接\n\n  ① 主动关闭方 发送一个 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("告知对方我已经不再发送数据了"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  ② 被动关闭方 收到"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIN")]),t._v("包后，发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ACK")]),t._v("给对方，确认序号为收到序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n  ③ 被动关闭方 再发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIN")]),t._v(" （ 告诉主动关闭方，我的数据也发送完了，不会再给你发数据了 ）\n\n  ④ 主动关闭方 收到"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIN")]),t._v("后，发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ACK")]),t._v("给被动关闭方，确认序号为收到序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"tcp-和-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[t._v("#")]),t._v(" TCP 和 UDP 的区别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v("（Transmission Control Protocol，传输控制协议）\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v(" 是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接。\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 一个 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v(" 连接必须要经过三次“对话”才能建立起来。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UDP")]),t._v("（User Data Protocol，用户数据报协议）\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UDP")]),t._v(" 是与 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v(" 相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去。\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UDP")]),t._v(" 适用于一次只传送少量数据、对可靠性要求不高的应用环境。\n")])])]),a("h3",{attrs:{id:"常见-web-安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见-web-安全"}},[t._v("#")]),t._v(" 常见 web 安全")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Xss")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cross"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("site scripting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("攻击\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 指的是攻击者往 Web 页面里插入恶意 html 标签或者 javascript 代码\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 如：攻击者在论坛中加一个恶意表单\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 如果网站不需要再浏览器端对 cookie 进行操作，可以在 Set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie 末尾加上 HttpOnly \n    来防止 javascript 代码直接获取 cookie\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 尽量采用 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v(" 而非 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" 提交表单\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CSRF")]),t._v(" 攻击\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CSRF")]),t._v(" 是代替用户完成指定的动作\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 完成一次 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CSRF")]),t._v(" 攻击，受害者必须依次完成两个步骤：\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 登录受信任网站 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("，并在本地生成 Cookie\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 在不登出 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" 的情况下，访问危险网站 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 在客户端页面增加伪随机数以防御\n")])])]),a("h3",{attrs:{id:"http-和-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https"}},[t._v("#")]),t._v(" HTTP 和 HTTPS")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" 协议通常承载于 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v(" 协议之上\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 默认 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" 的端口号为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 在 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" 和 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v(" 之间添加一个安全协议层（"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SSL")]),t._v(" 或 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TSL")]),t._v("）\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 的端口号为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 安全性强\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，所以 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" 存在安全性问题\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v("，密钥在你和终点站才有。\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 利用 ssl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tls "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("协议传输")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer 传递等"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 从而保障了传输过程的安全性。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" Http "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据\n          发送到客户端缓存中，从而提高性能。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  提供更多的加密支持。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  使用多路技术，允许多个消息在一个连接上同时交差。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  增加了头压缩（header compression），因此即使非常小的请求，其请求和响应的 header \n          都只会占用很小比例的带宽。\n")])])]),a("h3",{attrs:{id:"cookie-和-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session"}},[t._v("#")]),t._v(" Cookie 和 session")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Cookie 是一种存储机制，提供持久保存客户端数据的能力")])]),t._v(" "),a("li",[a("p",[t._v("session 对象存储在 Cookie 中， 保存一些常用的信息，如：access_token/user_info")])]),t._v(" "),a("li",[a("p",[t._v("cookie 数据存放在客户的浏览器上，session 数据放在服务器上")])]),t._v(" "),a("li",[a("p",[t._v("每个特定的域名下最多生成 20 个 Cookie")])]),t._v(" "),a("li",[a("p",[t._v("Cookie 的最大约为 4096 字节，为了兼容性，一般不能超过 4095 字节")])]),t._v(" "),a("li",[a("p",[t._v("每次请求一个新的页面 Cookie 都会被发送过去")])])]),t._v(" "),a("h4",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),a("p",[t._v("由于 http 无状态，所以需要存在一种机制去标识状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("- 基于 Cookie 的身份验证 & 验证流程\n\n  - 因为 cookie 验证有状态 所以会话信息(session) 同时保存在客户端(cookie) 和 服务端(sql)\n\n  - cookie 绑定单域 a.com 生成的不能再 b.com 中用\n\n  - 流程:\n    - 用户登录获取凭证\n    - 服务器验证凭证正确与否\n    - 若验证通过创建会话（set-cookie）(服务端存一份，浏览器端直接写入到 cookie，根据是否设置 http-only 决定浏览器端是否可操作 cookie，获取 session 拿到凭证信息)\n    - 后续请求均走上述验证流程\n    - 若 用户登出 则服务端与浏览器端同时清除 session\n\n- 基于 Token 的身份验证 & 验证流程\n\n  - 基于 JWT（JSON Web Tokens）生成 token\n  - 服务端不需要记录 token\n  - 多站点使用\n  - 支持 ios/Android\n  - 性能较好\n\n  - 流程：\n    - 用户登录获取凭证\n    - 服务器验证凭证，成功则返回一个已经签名后的 token\n    - 客服端存储 token\n    - 客服端请求，头里带上 token\n    - 服务端校验 token 合法性, 是否过期等\n    - 用户登出 客户端销毁 token\n")])])]),a("h3",{attrs:{id:"sessionstorage-和-localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage-和-localstorage"}},[t._v("#")]),t._v(" sessionStorage 和 localStorage")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" sessionStorage\n\nsessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且\n当会话结束后数据也随之销毁。因此 sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" localStorage\n\nlocalStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n")])])]),a("h3",{attrs:{id:"一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[t._v("#")]),t._v(" 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("（1) 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个  DNS 查询。这能使浏览器获得请求对应的 IP 地址。")])]),t._v(" "),a("li",[a("p",[t._v("（2)浏览器与远程"),a("code",[t._v("Web")]),t._v("服务器通过"),a("code",[t._v("TCP")]),t._v("三次握手协商来建立一个"),a("code",[t._v("TCP/IP")]),t._v("连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文， 这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。")])]),t._v(" "),a("li",[a("p",[t._v("（3)一旦"),a("code",[t._v("TCP/IP")]),t._v("连接建立，浏览器会通过该连接向远程服务器发送"),a("code",[t._v("HTTP")]),t._v("的"),a("code",[t._v("GET")]),t._v("请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。")])]),t._v(" "),a("li",[a("p",[t._v("（4)此时，"),a("code",[t._v("Web")]),t._v("服务器提供资源服务，客户端开始下载资源。")])]),t._v(" "),a("li",[a("p",[t._v("（5)前端层面，浏览器会解析"),a("code",[t._v("HTML")]),t._v("生成"),a("code",[t._v("DOM Tree")]),t._v("，其次会根据 CSS 生成 CSS Rule Tree，而"),a("code",[t._v("javascript")]),t._v("又可以根据"),a("code",[t._v("DOM API")]),t._v("操作"),a("code",[t._v("DOM")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n  详细版：\n  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n  3、通过 DNS 解析获取网址的 IP 地址，设置 UA 等信息发出第二个 GET 请求;\n  4、进行 HTTP 协议会话，客户端发送报头(请求报头);\n  5、进入到 web 服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n  6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回 304;\n  8、浏览器开始下载 html 文档(响应报头，状态码 200)，同时使用缓存;\n  9、文档树建立，根据标记请求所需指定 MIME 类型的文件（比如 css、js）,同时设置了 cookie;\n  10、页面开始渲染 DOM，JS 根据 DOM API 操作 DOM,执行事件绑定等，页面显示完成。\n\n  简洁版：\n  浏览器根据请求的 URL 交给 DNS 域名解析，找到真实 IP，向服务器发起请求；\n  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n  浏览器对加载到的资源（HTML、JS、CSS 等）进行语法解析，建立相应的内部数据结构（如 HTML 的 DOM）；\n  载入解析到的资源文件，渲染页面，完成。\n\n")])])]),a("blockquote",[a("p",[t._v("这里可扩展，这里只是简单说说")])]),t._v(" "),a("h3",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("指的是：协议，域名，端口相同，同源策略是一种安全协议")])]),t._v(" "),a("li",[a("p",[t._v("为什么要有同源限制?")]),t._v(" "),a("ul",[a("li",[t._v("因为可以利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容")])])])]),t._v(" "),a("h3",{attrs:{id:"get-和-post-的区别，何时使用-post？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别，何时使用-post？"}},[t._v("#")]),t._v(" GET 和 POST 的区别，何时使用 POST？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("GET：一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符")])]),t._v(" "),a("li",[a("p",[t._v("POST：一般用于修改服务器上的资源，对所发送的信息没有限制。")])]),t._v(" "),a("li",[a("p",[t._v("GET 方式需要使用 Request.QueryString 来取得变量的值，而 POST 方式通过 Request.Form 来获取变量的值，也就是说 Get 是通过地址栏来传值，而 Post 是通过提交表单来传值。")])]),t._v(" "),a("li",[a("p",[t._v("然而，在以下情况中，请使用 POST 请求：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无法使用缓存文件（更新服务器上的文件或数据库）")])]),t._v(" "),a("li",[a("p",[t._v("向服务器发送大量数据（POST 没有数据量限制）")])]),t._v(" "),a("li",[a("p",[t._v("发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠")])])])])]),t._v(" "),a("h3",{attrs:{id:"http-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[t._v("#")]),t._v(" HTTP 状态码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" Continue 继续，一般在发送 post 请求时，\n      已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v(" 正常返回信息\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("201")]),t._v(" Created 请求成功并且服务器创建了新的资源\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("202")]),t._v(" Accepted 服务器已接受请求，但尚未处理\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v(" Moved Permanently 请求的网页已永久移动到新位置。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v(" Found 临时性重定向。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("303")]),t._v(" See Other 临时性重定向，且总是使用 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" 请求新的 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URI")]),t._v("。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),t._v(" Not Modified 自从上次请求后，请求的网页未修改过。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v(" Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("401")]),t._v(" Unauthorized 请求未授权。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v(" Forbidden 禁止访问。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v(" Not Found 找不到如何与 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URI")]),t._v(" 相匹配的资源。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" Internal Server Error 最常见的服务器端错误。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n\n")])])]),a("h3",{attrs:{id:"网络七层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络七层模型"}},[t._v("#")]),t._v(" 网络七层模型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("应用层：应用层、表示层、会话层（从上往下）（HTTP、FTP、SMTP、DNS）")])]),t._v(" "),a("li",[a("p",[t._v("传输层（TCP 和 UDP）")])]),t._v(" "),a("li",[a("p",[t._v("网络层（IP）")])]),t._v(" "),a("li",[a("p",[t._v("物理和数据链路层（以太网）")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n  物理层：通过媒介传输比特"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("确定机械及电气规范（比特Bit）\n\n  数据链路层：将比特组装成帧和点到点的传递（帧Frame）\n\n  网络层：负责数据包从源到宿的传递和网际互连（包PackeT）\n\n  传输层：提供端到端的可靠报文传递和错误恢复（段Segment）\n\n  会话层：建立、管理和终止会话（会话协议数据单元"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SPDU")]),t._v("）\n\n  表示层：对数据进行翻译、加密和压缩（表示协议数据单元"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PPDU")]),t._v("）\n\n  应用层：允许访问"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OSI")]),t._v("环境的手段（应用协议数据单元"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("APDU")]),t._v("）\n\n")])])]),a("h3",{attrs:{id:"网络协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络协议"}},[t._v("#")]),t._v(" 网络协议")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ICMP")]),t._v(" 协议： 因特网控制报文协议。它是 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v(" 协议族的一个子协议，用于在 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v(" 主机、路由器之间传递控制消息。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TFTP")]),t._v(" 协议： 是 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v(" 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" 协议： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DHCP")]),t._v(" 协议： 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。\n\n")])])]),a("h3",{attrs:{id:"创建ajax过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建ajax过程"}},[t._v("#")]),t._v(" 创建ajax过程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n\n(3)设置响应HTTP请求状态变化的函数.\n\n(4)发送HTTP请求.\n\n(5)获取异步调用返回的数据.\n\n(6)使用JavaScript和DOM实现局部刷新.\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xmlHttp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    xmlHttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo.php'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    xmlHttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    xmlHttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xmlHttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" xmlHttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"谈谈性能优化问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈性能优化问题"}},[t._v("#")]),t._v(" 谈谈性能优化问题")]),t._v(" "),a("p",[t._v("代码层面：避免使用css表达式，避免使用高级选择器，通配选择器。")]),t._v(" "),a("p",[t._v("缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等")]),t._v(" "),a("p",[t._v("请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。")]),t._v(" "),a("p",[t._v("请求带宽：压缩文件，开启GZIP，")]),t._v(" "),a("p",[t._v("代码优化:")]),t._v(" "),a("ul",[a("li",[t._v("用"),a("code",[t._v("hash-table")]),t._v("来优化查找")]),t._v(" "),a("li",[t._v("少用全局变量")]),t._v(" "),a("li",[t._v("用"),a("code",[t._v("innerHTML")]),t._v("代替"),a("code",[t._v("DOM")]),t._v("操作，减少"),a("code",[t._v("DOM")]),t._v("操作次数，优化"),a("code",[t._v("javascript")]),t._v("性能")]),t._v(" "),a("li",[t._v("用"),a("code",[t._v("setTimeout")]),t._v("来避免页面失去响应")]),t._v(" "),a("li",[t._v("缓存DOM节点查找的结果")]),t._v(" "),a("li",[t._v("避免使用CSS Expression")]),t._v(" "),a("li",[t._v("避免全局查询")]),t._v(" "),a("li",[t._v("避免使用with(with会创建自己的作用域，会增加作用域链长度)")]),t._v(" "),a("li",[t._v("多个变量声明合并")]),t._v(" "),a("li",[t._v("避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率")]),t._v(" "),a("li",[t._v("尽量避免写在HTML标签中写Style属性")])]),t._v(" "),a("h3",{attrs:{id:"渲染优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染优化"}},[t._v("#")]),t._v(" 渲染优化")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("禁止使用iframe（阻塞父文档onload事件）；\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("iframe会阻塞主页面的Onload事件；\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("搜索引擎的检索程序无法解读这种页面，不利于"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SEO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n\n        使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n        动态给iframe添加src属性值，这样可以绕开以上两个问题。\n\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("禁止使用gif图片实现loading效果（降低"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CPU")]),t._v("消耗，提升渲染性能）；\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、使用"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CSS3")]),t._v("代码代替"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("动画（尽可能避免重绘重排以及回流）；\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("、对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CPU")]),t._v("；\n            小图标优势在于：\n                "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("减少"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v("请求；\n                "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("避免文件跨域；\n                "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("修改及时生效；\n\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("、页面头部的"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 会阻塞页面；（因为 Renderer进程中 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("线程和渲染线程是互斥的）；\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("、页面头部"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 会阻塞页面；（因为 Renderer进程中 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("线程和渲染线程是互斥的）；\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("、页面中空的 href 和 src "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("会阻塞页面其他资源的加载")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("阻塞下载进程"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n    \n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("、网页Gzip，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CDN")]),t._v("托管，data缓存 ，图片服务器；\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("、前端模板 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("数据，减少由于"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTML")]),t._v("标签导致的带宽浪费，前端用变量保存"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AJAX")]),t._v("请求结果，每次操作本地变量，不用请求，减少请求次数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("、用innerHTML代替"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("操作，减少"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("操作次数，优化javascript性能。\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("、当需要设置的样式很多时设置className而不是直接操作style。\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("、少用全局变量、缓存"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("节点查找的结果。减少"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IO")]),t._v("读取操作。\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("、避免使用"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CSS")]),t._v(" Expression（css表达式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("又称Dynamic "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("动态属性"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("。\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v("、图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("、 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("css布局慢。\n        对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IO")]),t._v("。\n            向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，\n            能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，\n            本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。\n            减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），\n            减少磁盘"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IO")]),t._v("指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。\n            \n")])])]),a("h3",{attrs:{id:"什么是etag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是etag"}},[t._v("#")]),t._v(" 什么是Etag")]),t._v(" "),a("p",[t._v("当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。")]),t._v(" "),a("p",[t._v("情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到 "),a("code",[t._v("200 OK")]),t._v("(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。")]),t._v(" "),a("p",[t._v("情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和"),a("code",[t._v("Etag")])]),t._v(" "),a("p",[t._v("然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据"),a("code",[t._v("Etag")]),t._v("，判断文件内容自上一次请求之后，有没有发生变化")]),t._v(" "),a("p",[t._v("情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发"),a("code",[t._v("index.html")]),t._v("的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— "),a("code",[t._v("304 Not Modified")]),t._v("，此时浏览器就会从本地缓存中获取"),a("code",[t._v("index.html")]),t._v("的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。")]),t._v(" "),a("p",[t._v("情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①")]),t._v(" "),a("p",[t._v("只有get请求会被缓存，post请求不会.")]),t._v(" "),a("h3",{attrs:{id:"expires和cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires和cache-control"}},[t._v("#")]),t._v(" Expires和Cache-Control")]),t._v(" "),a("p",[a("code",[t._v("Expires")]),t._v("要求客户端和服务端的时钟严格同步。"),a("code",[t._v("HTTP1.1")]),t._v("引入"),a("code",[t._v("Cache-Control")]),t._v("来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Cache-Control: no-cache, private, max-age=0\n\n    ETag: abcde\n\n    Expires: Thu, 15 Apr 201420180515 20:00:00 GMT\n\n    Pragma: private\n\n    Last-Modified: $now // RFC1123 format\n")])])]),a("h3",{attrs:{id:"etag应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag应用"}},[t._v("#")]),t._v(" ETag应用:")]),t._v(" "),a("p",[a("code",[t._v("Etag")]),t._v("由服务器端生成，客户端通过"),a("code",[t._v("If-Match")]),t._v("或者说"),a("code",[t._v("If-None-Match")]),t._v("这个条件判断请求来验证资源是否修改。常见的是使用"),a("code",[t._v("If-None-Match")]),t._v("。请求一个文件的流程可能如下：")]),t._v(" "),a("p",[t._v("====第一次请求===")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('1.客户端发起 HTTP GET 请求一个文件；\n\n2.服务器处理请求，返回文件内容和一堆Header，当然包括Etag(例如"2e681a-6-5d044840")(假设服务器支持Etag生成和已经开启了Etag).状态码200\n')])])]),a("p",[t._v("====第二次请求===")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("客户端发起 HTTP GET 请求一个文件，注意这个时候客户端同时发送一个If-None-Match头，这个头的内容就是第一次请求时服务器返回的Etag：2e681a-6-5d0448402.服务器判断发送过来的Etag和计算出来的Etag匹配，因此If-None-Match为False，不返回200，返回304，客户端继续使用本地缓存；流程很简单，问题是，如果服务器又设置了Cache-Control:max-age和Expires呢，怎么办\n")])])]),a("p",[t._v("答案是同时使用，也就是说在完全匹配"),a("code",[t._v("If-Modified-Since")]),t._v("和"),a("code",[t._v("If-None-Match")]),t._v("即检查完修改时间和"),a("code",[t._v("Etag")]),t._v("之后，")]),t._v(" "),a("p",[t._v("服务器才能返回304.(不要陷入到底使用谁的问题怪圈)")]),t._v(" "),a("p",[t._v("为什么使用Etag请求头?")]),t._v(" "),a("p",[t._v("Etag 主要为了解决 "),a("code",[t._v("Last-Modified")]),t._v(" 无法解决的一些问题。")]),t._v(" "),a("h3",{attrs:{id:"关于http-2-0-你知道多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于http-2-0-你知道多少"}},[t._v("#")]),t._v(" 关于Http 2.0 你知道多少")]),t._v(" "),a("p",[a("code",[t._v("HTTP/2")]),t._v("引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据发送到客户端缓存中，从而提高性能。")]),t._v(" "),a("p",[a("code",[t._v("HTTP/2")]),t._v("提供更多的加密支持")]),t._v(" "),a("p",[a("code",[t._v("HTTP/2")]),t._v("使用多路技术，允许多个消息在一个连接上同时交差。")]),t._v(" "),a("p",[t._v("它增加了头压缩（header compression），因此即使非常小的请求，其请求和响应的"),a("code",[t._v("header")]),t._v("都只会占用很小比例的带宽。")]),t._v(" "),a("h3",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),a("p",[t._v("由于 http 存在一个明显的弊端（消息只能有客户端推送到服务器端，而服务器端不能主动推送到客户端），导致如果服务器如果有连续的变化，这时只能使用轮询，而轮询效率过低，并不适合。于是 WebSocket 被发明出来。")]),t._v(" "),a("p",[t._v("相比与 http 具有以下有点：")]),t._v(" "),a("ul",[a("li",[t._v("支持双向通信，实时性更强；")]),t._v(" "),a("li",[t._v("可以发送文本，也可以二进制文件；")]),t._v(" "),a("li",[t._v("协议标识符是 ws，加密后是 wss ；")]),t._v(" "),a("li",[t._v("较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客- 户端到服务端的的话，需要加上额外的4字节的掩码。而HTTP协议每次通信都需要携带完整的头部；")]),t._v(" "),a("li",[t._v("支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）")]),t._v(" "),a("li",[t._v("无跨域问题。\n实现比较简单，服务端库如 socket.io、ws ，可以很好的帮助我们入门。而客户端也只需要参照 api 实现即可。")])]),t._v(" "),a("h3",{attrs:{id:"浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),a("p",[t._v("浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：")]),t._v(" "),a("ul",[a("li",[t._v("先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；")]),t._v(" "),a("li",[t._v("当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；")]),t._v(" "),a("li",[t._v("强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；")]),t._v(" "),a("li",[t._v("区别是，强缓存不对发送请求到服务器，但协商缓存会。")]),t._v(" "),a("li",[t._v("当协商缓存也没命中时，服务器就会将资源发送回客户端。")]),t._v(" "),a("li",[t._v("当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；")]),t._v(" "),a("li",[t._v("当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；")])]),t._v(" "),a("h4",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),a("ul",[a("li",[t._v("Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）")]),t._v(" "),a("li",[t._v("Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）")])]),t._v(" "),a("h4",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("ul",[a("li",[t._v("Last-Modified（值为资源最后更新时间，随服务器response返回）")]),t._v(" "),a("li",[t._v("If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）")]),t._v(" "),a("li",[t._v("ETag（表示资源内容的唯一标识，随服务器response返回）")]),t._v(" "),a("li",[t._v("If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）")])]),t._v(" "),a("h3",{attrs:{id:"http-和-https-有何差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https-有何差异"}},[t._v("#")]),t._v(" HTTP 和 HTTPS 有何差异?")]),t._v(" "),a("p",[a("code",[t._v("HTTP")]),t._v("相对于 "),a("code",[t._v("HTTPS")]),t._v("来说,速度较快且开销较小(没有 SSL/TSL) 对接,默认是80端口;")]),t._v(" "),a("p",[t._v("HTTP容易遭受域名劫持,而HTTPS相对来说就较为安全但开销较大(数据以加密的形式传递),默认端口为443..\n`\nHTTP是明文跑在 TCP 上.而HTTPS跑在SSL/TLS应用层之下,TCP上的")]),t._v(" "),a("h3",{attrs:{id:"你对-http-的状态吗了解多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你对-http-的状态吗了解多少"}},[t._v("#")]),t._v(" 你对 HTTP 的状态吗了解多少...")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1XX: 一般用来判断协议更换或者确认服务端收到请求这些")]),t._v(" "),a("ul",[a("li",[t._v("100: 服务端收到部分请求,若是没有拒绝的情况下可以继续传递后续内容")]),t._v(" "),a("li",[t._v("101: 客户端请求变换协议,服务端收到确认")])])]),t._v(" "),a("li",[a("p",[t._v("2xx: 请求成功,是否创建链接,请求是否接受,是否有内容这些")]),t._v(" "),a("ul",[a("li",[t._v("200: (成功)服务器已成功处理了请求。")]),t._v(" "),a("li",[t._v("201: (已创建)请求成功并且服务器创建了新的资源。")]),t._v(" "),a("li",[t._v("202: (已接受)服务器已接受请求，但尚未处理。")]),t._v(" "),a("li",[t._v("204: (无内容)服务器成功处理了请求，但没有返回任何内容。")])])]),t._v(" "),a("li",[a("p",[t._v("3XX: 一般用来判断重定向和缓存")]),t._v(" "),a("ul",[a("li",[t._v("301: 所有请求已经转移到新的 url(永久重定向),会被缓存")]),t._v(" "),a("li",[t._v("302: 临时重定向,不会被缓存")]),t._v(" "),a("li",[t._v("304: 本地资源暂未改动,优先使用本地的(根据If-Modified-Since or If-Match去比对服务器的资源,缓存)")])])]),t._v(" "),a("li",[a("p",[t._v("4XX: 一般用来确认授权信息,请求是否出错,页面是否丢失")]),t._v(" "),a("ul",[a("li",[t._v("400: 请求出错")]),t._v(" "),a("li",[t._v("401: 未授权,不能读取某些资源")]),t._v(" "),a("li",[t._v("403: 阻止访问,一般也是权限问题")]),t._v(" "),a("li",[t._v("404: 页面丢失,资源没找到")]),t._v(" "),a("li",[t._v("408: 请求超时")]),t._v(" "),a("li",[t._v("415: 媒介类型不被支持，服务器不会接受请求。")])])]),t._v(" "),a("li",[a("p",[t._v("5XX: 基本都是服务端的错误")]),t._v(" "),a("ul",[a("li",[t._v("500: 服务端错误")]),t._v(" "),a("li",[t._v("502: 网关错误")]),t._v(" "),a("li",[t._v("504: 网关超时")])])])]),t._v(" "),a("h3",{attrs:{id:"从你输入一个-url-到页面渲染的大体过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从你输入一个-url-到页面渲染的大体过程"}},[t._v("#")]),t._v(" 从你输入一个 URL 到页面渲染的大体过程...")]),t._v(" "),a("ul",[a("li",[t._v("IP->DNS(浏览器=>系统缓存=>DNS 服务器)->域名解析完成(这一步不用太多解析吧)")]),t._v(" "),a("li",[t._v("TCP 协议走完->HTTP(S) 协议->缓存->(分析请求头)-> 回馈报文")]),t._v(" "),a("li",[t._v("请求文档下来->DOM->CSSDOM->静态资源下载->render(绘制文档)->js 解析")]),t._v(" "),a("li",[t._v("用户看到页面")])]),t._v(" "),a("h3",{attrs:{id:"http的几种请求方法用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http的几种请求方法用途"}},[t._v("#")]),t._v(" HTTP的几种请求方法用途")]),t._v(" "),a("p",[t._v("1、GET方法")]),t._v(" "),a("p",[t._v("发送一个请求来取得服务器上的某一资源")]),t._v(" "),a("p",[t._v("2、POST方法")]),t._v(" "),a("p",[t._v("向URL指定的资源提交数据或附加新的数据")]),t._v(" "),a("p",[t._v("3、PUT方法")]),t._v(" "),a("p",[t._v("跟POST方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而POST没有")]),t._v(" "),a("p",[t._v("4、HEAD方法")]),t._v(" "),a("p",[t._v("只请求页面的首部")]),t._v(" "),a("p",[t._v("5、DELETE方法")]),t._v(" "),a("p",[t._v("删除服务器上的某资源")]),t._v(" "),a("p",[t._v("6、OPTIONS方法")]),t._v(" "),a("p",[t._v("它用于获取当前URL所支持的方法。如果请求成功，会有一个Allow的头包含类似“GET,POST”这样的信息")]),t._v(" "),a("p",[t._v("7、TRACE方法")]),t._v(" "),a("p",[t._v("TRACE方法被用于激发一个远程的，应用层的请求消息回路")]),t._v(" "),a("p",[t._v("8、CONNECT方法")]),t._v(" "),a("p",[t._v("把请求连接转换到透明的TCP/IP通道")]),t._v(" "),a("h3",{attrs:{id:"_301和302-http状态有啥区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_301和302-http状态有啥区别？"}},[t._v("#")]),t._v(" 301和302 Http状态有啥区别？")]),t._v(" "),a("p",[t._v("301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("301 redirect: 301 代表永久性转移(Permanently Moved)，")])]),t._v(" "),a("li",[a("p",[t._v("302 redirect: 302 代表暂时性转移(Temporarily Moved )，")])])]),t._v(" "),a("p",[t._v("当然　Http 状态 200 标示没有任何问题发生。")]),t._v(" "),a("h3",{attrs:{id:"get和post有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post有什么区别？"}},[t._v("#")]),t._v(" GET和POST有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("数据传输方式不同：GET请求通过URL传输数据，而POST的数据通过请求体传输。")]),t._v(" "),a("li",[t._v("安全性不同：POST的数据因为在请求主体内，所以有一定的安全性保证，而GET的数据在URL中，通过历史记录，缓存很容易查到数据信息。")]),t._v(" "),a("li",[t._v("数据类型不同：GET只允许 ASCII 字符，而POST无限制")]),t._v(" "),a("li",[t._v("GET无害： 刷新、后退等浏览器操作GET请求是无害的，POST可能重复提交表单")]),t._v(" "),a("li",[t._v("特性不同：GET是安全（这里的安全是指只读特性，就是使用这个方法不会引起服务器状态变化）且幂等（幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同），而- - POST是非安全非幂等")])]),t._v(" "),a("h3",{attrs:{id:"put和post都是给服务器发送新增资源，有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#put和post都是给服务器发送新增资源，有什么区别？"}},[t._v("#")]),t._v(" PUT和POST都是给服务器发送新增资源，有什么区别？")]),t._v(" "),a("p",[t._v("PUT 和POST方法的区别是,PUT方法是幂等的：连续调用一次或者多次的效果相同（无副作用），而POST方法是非幂等的。\n除此之外还有一个区别，通常情况下，PUT的URI指向是具体单一资源，而POST可以指向资源集合。\n举个例子，我们在开发一个博客系统，当我们要创建一篇文章的时候往往用POST https://www.jianshu.com/articles，这个请求的语义是，在articles的资源集合下创建一篇新的文章，如果我们多次提交这个请求会创建多个文章，这是非幂等的。\n而PUT https://www.jianshu.com/articles/820357430的语义是更新对应文章下的资源（比如修改作者名称等），这个URI指向的就是单一资源，而且是幂等的，比如你把『刘德华』修改成『蔡徐坤』，提交多少次都是修改成『蔡徐坤』")]),t._v(" "),a("h3",{attrs:{id:"什么是跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[t._v("#")]),t._v(" 什么是跨域?")]),t._v(" "),a("p",[t._v("跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。")]),t._v(" "),a("h3",{attrs:{id:"什么是同源策略？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源策略？"}},[t._v("#")]),t._v(" 什么是同源策略？")]),t._v(" "),a("p",[t._v('同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS 、 CSFR 等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。')]),t._v(" "),a("ul",[a("li",[t._v("同源策略限制了以下行为：\n"),a("ul",[a("li",[t._v("Cookie、LocalStorage 和 IndexDB 无法读取")]),t._v(" "),a("li",[t._v("DOM 和 JS对象无法获取")]),t._v(" "),a("li",[t._v("Ajax请求发送不出去")])])]),t._v(" "),a("li",[t._v("解决跨域\n"),a("ul",[a("li",[t._v("jsonp 跨域")]),t._v(" "),a("li",[t._v("document.domain + iframe 跨域")]),t._v(" "),a("li",[t._v("window.name + iframe 跨域")]),t._v(" "),a("li",[t._v("location.hash + iframe 跨域")]),t._v(" "),a("li",[t._v("postMessage 跨域")]),t._v(" "),a("li",[t._v("跨域资源共享CORS")]),t._v(" "),a("li",[t._v("withCredentials 属性")]),t._v(" "),a("li",[t._v("WebSocket 协议跨域")]),t._v(" "),a("li",[t._v("node 代理跨域")]),t._v(" "),a("li",[t._v("nginx 代理跨域")])])])]),t._v(" "),a("h3",{attrs:{id:"什么是options预请求？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是options预请求？"}},[t._v("#")]),t._v(" 什么是options预请求？")]),t._v(" "),a("p",[a("code",[t._v("options")]),t._v("预请求是浏览器自主发起的，分别根据预检请求报文中的 "),a("code",[t._v("Access-Control-Request-Method")]),t._v("、"),a("code",[t._v("Access-Control-Request-Headers")]),t._v("来判断该请求是否是服务器允许的提交方式和允许的请求头字段；\n服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。")]),t._v(" "),a("h3",{attrs:{id:"解释一下事件冒泡和事件捕获呢？如何阻止冒泡？如何阻止默认事件？手写一个事件委托的例子呢？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释一下事件冒泡和事件捕获呢？如何阻止冒泡？如何阻止默认事件？手写一个事件委托的例子呢？"}},[t._v("#")]),t._v(" 解释一下事件冒泡和事件捕获呢？如何阻止冒泡？如何阻止默认事件？手写一个事件委托的例子呢？")]),t._v(" "),a("p",[t._v("一个完整的JS事件流是从window开始，最后回到window的一个过程；\n事件流被分为三个阶段(1 ~ 5)捕获过程、(5 ~ 6)目标过程、(6 ~ 10)冒泡过程。\n事件冒泡就是事件从最深的节点开始，然后逐步向上传播事件的过程；\n事件捕获就是从window开始，逐步向最深的节点传播事件的过程.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 事件委托：就是把事件处理器添加到父元素，等待子元素事件冒泡，并且父元素能够通过target（IE为srcElement）判断是哪个子元素，从而做相应处理")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ul "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'ul"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nul"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclick")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHtml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 阻止冒泡: window.event? window.event.cancelBubble = true(IE) : e.stopPropagation()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 阻止默认事件: e.preventDefault() || window.event.returnValue = false(IE)")]),t._v("\n")])])]),a("h3",{attrs:{id:"请描述一下内存泄漏的原因和场景？那js的垃圾回收机制有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请描述一下内存泄漏的原因和场景？那js的垃圾回收机制有哪些？"}},[t._v("#")]),t._v(" 请描述一下内存泄漏的原因和场景？那js的垃圾回收机制有哪些？")]),t._v(" "),a("p",[t._v("内存泄漏指的是浏览器不能正常的回收内存的现象")]),t._v(" "),a("p",[t._v("1.全局变量引起的内存泄漏\n2.闭包引起的内存泄漏\n3.dom清空或删除时，事件未清除导致的内存泄漏\n当函数执行结束，局部变量就不需要了，这时候就可以释放他们的内存。")]),t._v(" "),a("p",[t._v("两种回收机制：")]),t._v(" "),a("ul",[a("li",[t._v("引用计数法\n跟踪记录每个值被引用的次数。当声明一个变量并将引用类型的值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次 数加1.相反，如果包含对这个值引用的变量又取得另外一个值，则这个值的引用次数减1.当这个值的引用次数变成0时，则说明没有办法访问这个值了，因此就 可以将其占用的内存空间回收回来")]),t._v(" "),a("li",[t._v("标记清除法\n标记清除的算法分为两个阶段，标记(mark)和清除(sweep) 第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。")])]),t._v(" "),a("h3",{attrs:{id:"dom事件中target和currenttarget的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom事件中target和currenttarget的区别"}},[t._v("#")]),t._v(" DOM事件中target和currentTarget的区别")]),t._v(" "),a("ul",[a("li",[t._v("event.target 返回触发事件的元素")]),t._v(" "),a("li",[t._v("event.currentTarget 返回绑定事件的元素")])]),t._v(" "),a("h3",{attrs:{id:"跨域的几种方式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域的几种方式？"}},[t._v("#")]),t._v(" 跨域的几种方式？")]),t._v(" "),a("ul",[a("li",[t._v("利用script标签的跨域能力）跨域")]),t._v(" "),a("li",[t._v("websocket（html5的新特性，是一种新协议）跨域")]),t._v(" "),a("li",[t._v("设置代理服务器（由服务器替我们向不同源的服务器请求数据）")]),t._v(" "),a("li",[t._v("CORS（跨源资源共享，cross origin resource sharing）")]),t._v(" "),a("li",[t._v("iframe跨域")]),t._v(" "),a("li",[t._v("postMessage(包含iframe的页面向iframe传递消息)")])])])}),[],!1,null,null,null);s.default=e.exports}}]);