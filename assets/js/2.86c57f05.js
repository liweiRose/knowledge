(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{176:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"浏览器缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器缓存")]),s("ul",[s("li",[s("p",[t._v("浏览器在加载资源时，先根据这个资源的一些 http header 判断它是否命中强缓存，强缓存如果命中，浏览器直接从自己的缓存中读取资源，不会发请求到服务器。比如某个 css 文件，如果浏览器在加载它所在的网页时，这个 css 文件的缓存配置命中了强缓存，浏览器就直接从缓存中加载这个 css，连请求都不会发送到网页所在服务器；")])]),s("li",[s("p",[t._v("当强缓存没有命中的时候，浏览器一定会发送一个请求到服务器，通过服务器端依据资源的另外一些 http header 验证这个资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回，但是不会返回这个资源的数据，而是告诉客户端可以直接从缓存中加载这个资源，于是浏览器就又会从自己的缓存中去加载这个资源；")])]),s("li",[s("p",[t._v("强缓存与协商缓存的共同点是：如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据；区别是：强缓存不发请求到服务器，协商缓存会发请求到服务器。")])]),s("li",[s("p",[t._v("当协商缓存也没有命中的时候，浏览器直接从服务器加载资源数据。")])])]),s("h2",{attrs:{id:"强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 强缓存")]),s("ul",[s("li",[t._v("浏览器对某个资源的请求命中了强缓存时，返回的 http 状态为 200，在 chrome 的开发者工具的 network 里面 size 会显示为 (from cache)")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("name")]),s("th",[t._v("status")]),s("th",[t._v("type")]),s("th",[t._v("initiator")]),s("th",[t._v("size")]),s("th",[t._v("time")]),s("th",[t._v("waterfall")])])]),s("tbody",[s("tr",[s("td",[t._v("a.js")]),s("td",[t._v("200")]),s("td",[t._v("script")]),s("td",[t._v("index")]),s("td",[t._v("from cache")]),s("td",[t._v("0ms")]),s("td",[t._v("-----")])])])]),s("ul",[s("li",[t._v("强缓存是利用 Expires 或者 Cache-Control 这两个 http response header 实现的，它们都用来表示资源在客户端缓存的有效期。")])]),s("h3",{attrs:{id:"expires"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expires","aria-hidden":"true"}},[t._v("#")]),t._v(" Expires")]),s("ul",[s("li",[t._v("它是 http1.0 提出的一个表示资源过期时间的 header")]),s("li",[t._v("描述的是一个绝对时间，由服务器返回")]),s("li",[t._v("Expires:Thu, 31 Dec 2037 23:55:55 GMT")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n ① 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone 的 header 里加上 Expires\n\n ② 浏览器在接收到这个资源后，会把这个资源连同所有 response header 一起缓存下来\n  （ 所以缓存命中的请求返回的header并不是来自服务器，而是来自之前缓存的header ）\n\n ③ 浏览器再次请求这个资源时，先从缓存中寻找，找到这个资源后，拿出它的 Expires 跟当前的请求时间比较\n    如果请求时间在 Expires 指定的时间之前，就能命中缓存，否则就不行。\n\n ④ 如果缓存没有命中，浏览器直接从服务器加载资源时，Expires Header在重新加载的时候会被更新。\n\n tips:\n\n   - 服务器时间与客户端时间相差较大时，缓存管理容易出现问题\n\n   - 故在 http1.1 的时候，提出了一个新的 header，就是 Cache-Control\n")])])]),s("h3",{attrs:{id:"cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[t._v("#")]),t._v(" Cache-Control")]),s("ul",[s("li",[t._v("来控制页面的缓存与否")]),s("li",[t._v("是一个相对时间，以秒为单位。")]),s("li",[t._v("Cache-Control:max-age=115360000")])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n ① 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone 的 header 里加上 Cache-Control\n\n ② 浏览器在接收到这个资源后，会把这个资源连同所有 response header 一起缓存下来\n\n ③ 浏览器再请求这个资源时，先从缓存中寻找，找到这个资源后，\n    根据它第一次的请求时间和 Cache-Control 设定的有效期，计算出一个资源过期时间，\n    再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行。\n\n ④ 如果缓存没有命中，浏览器直接从服务器加载资源时，Cache-Control Header 在重新加载的时候会被更新。\n\n\n tips：\n\n  - 当 Expires 和 Cache-Control 同时存在时，Cache-Control 优先级高于 Expires\n\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nCache-Control 配置：\n\n  请求 Request Header：\n\n    [1] no-cache  ---- 不要读取缓存中的文件，要求向WEB服务器重新请求\n\n    [2] no-store  ---- 请求和响应都禁止被缓存\n\n  响应 Response Header：\n\n    [1] public     ---- 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低\n    [2] private    ---- 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享\n\n    [3] no-cache   ---- 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端\n    [4] no-store   ---- 请求和响应都禁止被缓存\n    [4] max-age    ---- 本响应包含的对象的过期时间\n\n")])])]),s("h3",{attrs:{id:"是否启用强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是否启用强缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 是否启用强缓存")]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("# 启用\n\njava"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDateHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Expires"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Expires: 过期值")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cache-Control"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"public"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// public: 浏览器和缓存服务器都可以缓存页面信息")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pragma"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pragma"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Pragma:设置页面是否缓存，为 Pragma 则缓存，no-cache 则不缓存")]),t._v("\n\n# 不启用\n\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDateHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Expires"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cache-Control"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-cache"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器和缓存服务器都不应该缓存页面信息")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pragma"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-cache"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n# tips"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 可以在 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Chrome")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" network 设置 "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Disable")]),t._v(" cache 禁止缓存\n\n")])])]),s("h3",{attrs:{id:"应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 应用")]),s("ul",[s("li",[s("p",[t._v("强缓存是前端性能优化最有力的工具，没有之一，对于有大量静态资源的网页，一定要利用强缓存，提高响应速度")]),s("ul",[s("li",[t._v("通常的做法是，为这些静态资源全部配置一个超时时间超长的 Expires 或 Cache-Control；如：2029 年后\n"),s("ul",[s("li",[t._v("这种做法所引发的问题：\n"),s("ul",[s("li",[t._v("发布时资源更新的问题（ 因为缓存的存在，加载本地缓存文件，发布文件应用不上 ）")])])])])])])]),s("li",[s("p",[t._v("通常都是针对静态资源使用，动态资源需要慎用")])])]),s("h2",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 协商缓存")]),s("ul",[s("li",[t._v("当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的 http 状态为 304 并且会显示一个 Not Modified 的字符串")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("name")]),s("th",[t._v("status")]),s("th",[t._v("type")]),s("th",[t._v("initiator")]),s("th",[t._v("size")]),s("th",[t._v("time")]),s("th",[t._v("waterfall")])])]),s("tbody",[s("tr",[s("td",[t._v("a.js")]),s("td",[t._v("304 (Not Modified)")]),s("td",[t._v("script")]),s("td",[t._v("index")]),s("td",[t._v("200kb")]),s("td",[t._v("200ms")]),s("td",[t._v("-----")])])])]),s("ul",[s("li",[t._v("协商缓存是利用的是 [ Last-Modified，If-Modified-Since ] 和 [ ETag、If-None-Match ] 这两对 Header 来管理")])]),s("h3",{attrs:{id:"last-modified，if-modified-since"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#last-modified，if-modified-since","aria-hidden":"true"}},[t._v("#")]),t._v(" Last-Modified，If-Modified-Since")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n ① 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，\n    在 respone 的 header 里加上 Last-Modified 表示这个资源在服务器上的最后修改时间：\n    Last-Modified：Thu, 31 Dec 2037 23:55:55 GMT\n\n ② 浏览器再次跟服务器请求这个资源时，在 request 的 header 里加上 If-Modified-Since，\n    值是上一次请求时返回的 Last-Modified 的值\n    If-Modified-Since：Thu, 31 Dec 2037 23:55:55 GMT\n\n ③ 服务器再次收到资源请求时，根据浏览器传过来 If-Modified-Since 和 资源在服务器上的最后修改时间判断资源是否有变化\n    如果没有变化则返回304 Not Modified，但是不会返回资源内容；\n    如果有变化，就正常返回资源内容。\n    当服务器返回 304 Not Modified 的响应时，response header 中不会再添加 Last-Modified，\n    因为既然资源没有变化，那么Last-Modified也就不会改变。\n\n ④ 浏览器收到304的响应后，就会从缓存中加载资源\n\n ⑤ 如果协商缓存没有命中，浏览器直接从服务器加载资源时，\n    Last-Modified Header 在重新加载的时候会被更新，\n    下次请求时，If-Modified-Since 会启用上次返回的 Last-Modified 值\n\n")])])]),s("h3",{attrs:{id:"etag、if-none-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#etag、if-none-match","aria-hidden":"true"}},[t._v("#")]),t._v(" ETag、If-None-Match")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n ① 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone header 里加上 ETag ，它是服务器根据当前请求的资源生成的一个唯一标识\n    这个唯一标识是一个字符串，只要资源有变化这个字符串就不同，与最后修改时间没有关系。\n    ETag：'asdadasdadw2131'\n\n ② 浏览器再次跟服务器请求这个资源时，在 request header 里加上 If-None-Match，它的值是上一次请求时返回的 ETag 的值\n    If-None-Match：'asdadasdadw2131'\n\n ③ 服务器再次收到资源请求时，根据浏览器传过来 If-None-Matc 和 根据资源生成一个新的 ETag，\n    如果这两个值相同就说明资源没有变化，否则就是有变化；\n    如果没有变化则返回 304 Not Modified，但是不会返回资源内容；\n    如果有变化，就正常返回资源内容。\n    304 Not Modified时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化\n\n ④ 浏览器收到304的响应后，就会从缓存中加载资源\n\n")])])])])}],!1,null,null,null);a.default=n.exports}}]);